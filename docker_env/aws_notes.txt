/** Create lambda function */

'aws lambda create-function --function-name ' + functionName + ' --runtime ' + runtime + ' --role ' + config.aws.arn_role + ' --memory-size ' + ram + ' --handler ' + handler + ' --zip-file ' + srcPath + ' --region ' + config.aws.region + ' --timeout ' + timeout

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/cpu_test:/function amazon/aws-cli lambda create-function --function-name my-function --runtime python3.7 --role arn:aws:iam::845370682265:role/service-role/latency-test-role-4h2s4iwb --handler cpu_test.lambda_handler --timeout 30 --publish --region us-east-1 --zip-file fileb:///function/cpu_test.zip



/** get the ARN of lambda */

let lambdaarn = await execShellCommand(dockerPrefixOnlyCLIVolume + 'aws lambda list-functions --query "Functions[?FunctionName==\\`' + functionName + '\\`].FunctionArn" --output text --region ' + config.aws.region)

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli lambda list-functions --query "Functions[?FunctionName=='my-function'].FunctionArn" --region us-east-1 --output text

arn:aws:lambda:us-east-1:845370682265:function:my-function



/** Create Api */

aws apigateway create-rest-api --name "' + APIName + '" --description "Api for ' + functionName + '" --region ' + config.aws.region

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli apigateway create-rest-api --name "newAPI" --description "NOMEFUNZIONE REST API" --region us-east-1



/** get the ID of the API */

let apiid = await execShellCommand(dockerPrefixOnlyCLIVolume + 'aws apigateway get-rest-apis --query "items[?name==\\`' + APIName + '\\`].id" --output text --region ' + config.aws.region

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli apigateway get-rest-apis --query "items[?name=='newAPI'].id" --region us-east-1 --output text

x2scrna5kb



/** get the parent ID of the API */

let parentresourceid = await execShellCommand(dockerPrefixOnlyCLIVolume + 'aws apigateway get-resources --rest-api-id ' + apiid + ' --query "items[?path==\\`/\\`].id" --output text --region ' + config.aws.region

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli apigateway get-resources --rest-api-id 'x2scrna5kb' --query "items[?path=='/'].id" --region us-east-1 --output text

3mv6g74mt5



/** Create resource on API */

'aws apigateway create-resource --rest-api-id ' + apiid + ' --parent-id ' + parentresourceid + ' --path-part ' + APIPath + ' --region ' + config.aws.region

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli apigateway create-resource --rest-api-id x2scrna5kb --parent-id  3mv6g74mt5 --path-part my-function --region us-east-1



/** get the resource ID */

let resourceid = await execShellCommand(dockerPrefixOnlyCLIVolume + 'aws apigateway get-resources --rest-api-id ' + apiid + ' --query "items[?path==\\`/' + APIPath + '\\`].id" --output text --region ' + config.aws.region

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli apigateway get-resources --rest-api-id x2scrna5kb --query "items[?path=='/my-function'].id" --region us-east-1 --output text

3xeto2



/** Create Method on resource */

'aws apigateway put-method --rest-api-id ' + apiid + ' --resource-id ' + resourceid + ' --http-method ANY --authorization-type NONE --region ' + config.aws.region

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli apigateway put-method --rest-api-id x2scrna5kb --resource-id 3xeto2 --http-method ANY --authorization-type NONE --region us-east-1



/** Link API to lambda function */

aws apigateway put-integration --rest-api-id ' + apiid + ' --resource-id ' + resourceid + ' --http-method ANY --type AWS_PROXY --integration-http-method POST --uri arn:aws:apigateway:' + config.aws.region + ':lambda:path/2015-03-31/functions/' + lambdaarn + '/invocations --region ' + config.aws.region

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli apigateway put-integration --rest-api-id x2scrna5kb --resource-id 3xeto2 --http-method ANY --type AWS_PROXY --integration-http-method POST --uri arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:845370682265:function:my-function/invocations --region us-east-1



/** Create deployment */

aws apigateway create-deployment --rest-api-id ' + apiid + ' --stage-name test --region ' + config.aws.region

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli apigateway create-deployment --rest-api-id x2scrna5kb --stage-name benchmark --region us-east-1




/** Give lambda API permission */

let apiarn = lambdaarn.replace('lambda', 'execute-api');
			apiarn = apiarn.replace('function:' + functionName, apiid);

aws lambda add-permission --function-name ' + functionName + ' --statement-id ' + functionName + ' --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn "' + apiarn + '/*/*/' + APIPath + '" --region ' + config.aws.region

arn:aws:execute-api:us-east-1:845370682265:x2scrna5kb/*/*/my-function

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli lambda add-permission --function-name my-function --statement-id my-function --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn "arn:aws:execute-api:us-east-1:845370682265:x2scrna5kb/*/*/my-function" --region us-east-1

url = 'https://' + apiid + '.execute-api.' + config.aws.region + '.amazonaws.com/benchmark/' + APIPath










 STATE MACHINE

 docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli stepfunctions create-state-machine --name statemachine --role-arn arn:aws:iam::918274741632:role/step-functions --type STANDARD --definition 'JSON WITHOUT \n and \" BUT "'

 {
    "stateMachineArn": "arn:aws:states:us-east-1:918274741632:stateMachine:statemachine",
    "creationDate": "2020-09-10T12:27:16.053000+00:00"
}

poi develop della funzione lambda e salvo l'arn per passarlo come parametro!!

unica risorsa necessaria per deletion l'arn

 docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli stepfunctions delete-state-machine --state-machine-arn arn:aws:states:us-east-1:918274741632:stateMachine:statemachine



DYNAMO TABLE

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/dynamo_tables:/function amazon/aws-cli dynamodb create-table --region us-east-2 --cli-input-json fileb:///function/ranking_translator.json

docker run --rm -i -v /Users/francescomarino/IdeaProjects/serverless_composition_performance_project/serverless_functions/aws/.aws:/root/.aws amazon/aws-cli dynamodb delete-table --region us-east-2 --table-name ranking_translator

